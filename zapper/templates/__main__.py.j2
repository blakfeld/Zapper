# Copyright (c) 2015-2016 MaxPoint Interactive, Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#    disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
#    products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
__main__.py -- Main entry point for this application.

This file has been automatically generated by zapper.
"""

import os
import sys
import site


def get_path(fname=None):
    """
    Return the absolute path of a file. If fname is None, return
        the path to __file__.

    Args:
        fname (str):        The file to get the absolute path of.

    Returns:
        str:                The path to 'fname'.
    """

    fname = __file__ if not fname else fname

    return os.path.dirname(os.path.abspath(fname))


def add_vendor_directories():
    """
    Adds any packages installed to a "vendor" directory to the sys.path.
    """

    # Save the state of our current path.
    prev_sys_path = list(sys.path)

    # The first item in 'sys.path' is the directory for the module,
    #   generally that isn't super useful for zipapps, but it's come
    #   to my attention that people like having it there.
    my_path = prev_sys_path[0]

    # List of paths we want prepended to syspath.
    paths_to_add = [
        os.path.join(get_path(__file__), 'vendor')
    ]

    # Loop through the paths to add, check if that directory exists and
    #   is readable, and if so, add it to our path.
    for path in paths_to_add:
        if not (os.path.exists(path) or
                os.path.isdir(path) or
                os.access(path, os.R_OK) or
                path):

            continue

        site.addsitedir(path)

    # Percolate new paths to the top.
    new_sys_path = []
    for path in list(sys.path):
        if path not in prev_sys_path:
            new_sys_path.append(path)
            sys.path.remove(path)

    # Prepend our re-ordered path.
    sys.path[:0] = [my_path] + new_sys_path


if __name__ == '__main__':

    add_vendor_directories()

    # Import our entry point.
    from {{ module_path }} import {{ entry_point }}

    # Call our application.
    {% if parameters is defined and parameters %}
    sys.exit({{ entry_point }}({{ parameters }}))
    {% else %}
    sys.exit({{ entry_point }}())
    {% endif %}
